<?xml version="1.0" encoding="utf-8" ?>
<Project DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003" ToolsVersion="4.0">

  <PropertyGroup>
    <MajorMinorVersion>2.0</MajorMinorVersion>
    <BuildLabel Condition=" '$(BuildLabelOverride)' == '' "> (PrivateBuild)</BuildLabel>
    <BuildLabel Condition=" '$(BuildLabelOverride)' == 'NONE' "></BuildLabel>
    <BuildLabel Condition=" '$(BuildLabelOverride)' != '' and '$(BuildLabelOverride)' != 'NONE' "> ($(BuildLabelOverride))</BuildLabel>
    <BuildLabelDash Condition=" '$(BuildLabelOverride)' == '' ">-PrivateBuild</BuildLabelDash>
    <BuildLabelDash Condition=" '$(BuildLabelOverride)' == 'NONE' "></BuildLabelDash>
    <BuildLabelDash Condition=" '$(BuildLabelOverride)' != '' and '$(BuildLabelOverride)' != 'NONE' ">-$(BuildLabelOverride)</BuildLabelDash>
    <BuildVersion Condition=" '$(BuildVersion)' == '' " >2.0.0.0</BuildVersion>
    <BuildVersion Condition=" '$(CCNetLabel)'!='' ">$(CCNetLabel)</BuildVersion>
    <BuildProductName>NLog v$(BuildVersion)$(BuildLabel)</BuildProductName>
  </PropertyGroup>

  <PropertyGroup>
    <Configuration Condition="'$(Configuration)'==''">Debug</Configuration>
    <BaseOutputDirectory>$(MSBuildProjectDirectory)\..\build\</BaseOutputDirectory>
    <ProjectTarget Condition="'$(ProjectTarget)'==''">Build</ProjectTarget>
    <FrameworksPath>$(MSBuildProjectDirectory)\Frameworks</FrameworksPath>    
    <BuildAllFrameworks>true</BuildAllFrameworks>
    <BuildAllFrameworks Condition="'$(BuildMono2)' == 'true'">false</BuildAllFrameworks>
    <BuildAllFrameworks Condition="'$(BuildSL2)' == 'true'">false</BuildAllFrameworks>
    <BuildAllFrameworks Condition="'$(BuildSL3)' == 'true'">false</BuildAllFrameworks>
    <BuildAllFrameworks Condition="'$(BuildSL4)' == 'true'">false</BuildAllFrameworks>
    <BuildAllFrameworks Condition="'$(BuildWP7)' == 'true'">false</BuildAllFrameworks>
    <BuildAllFrameworks Condition="'$(BuildWP71)' == 'true'">false</BuildAllFrameworks>
    <BuildAllFrameworks Condition="'$(BuildNetFX20)' == 'true'">false</BuildAllFrameworks>
    <BuildAllFrameworks Condition="'$(BuildNetFX35)' == 'true'">false</BuildAllFrameworks>
    <BuildAllFrameworks Condition="'$(BuildNetFX40)' == 'true'">false</BuildAllFrameworks>
    <BuildAllFrameworks Condition="'$(BuildNetCF20)' == 'true'">false</BuildAllFrameworks>
    <BuildAllFrameworks Condition="'$(BuildNetCF35)' == 'true'">false</BuildAllFrameworks>
    <IgnoreBuildFailures>false</IgnoreBuildFailures>
    <IgnoreBuildFailures Condition=" '$(BuildAllFrameworks)'=='true' ">true</IgnoreBuildFailures>
    <IgnoreBuildFailures Condition=" '$(IsNightlyBuild)'=='true' ">false</IgnoreBuildFailures>
    <ToolsDir>$(BaseOutputDirectory)\bin\Tools</ToolsDir>
    <SLTestRunner>$(ToolsDir)\SilverlightConsoleRunner.exe</SLTestRunner>
    <DeployNetCF>$(ToolsDir)\DeployNetCF.exe</DeployNetCF>
    <DumpApiXml>$(ToolsDir)\DumpApiXml.exe</DumpApiXml>
    <MergeApiXml>$(ToolsDir)\MergeApiXml.exe</MergeApiXml>
    <MakeNLogXSD>$(ToolsDir)\MakeNLogXSD.exe</MakeNLogXSD>
    <BuildDocPages>$(ToolsDir)\BuildDocPages.exe</BuildDocPages>
    <SyncProjectItems>$(ToolsDir)\SyncProjectItems.exe</SyncProjectItems>
    <DisableStyleCop Condition="'$(DisableStyleCop)' == ''">false</DisableStyleCop>
    <InfoZip>$(MSBuildProjectDirectory)\..\tools\zip.exe</InfoZip>
    <Tar>$(MSBuildProjectDirectory)\..\tools\tar.exe</Tar>
    <BZip2>$(MSBuildProjectDirectory)\..\tools\bzip2.exe</BZip2>
    <Git Condition=" '$(Git)' == '' ">git</Git>
    <ArchiveOutputPath>$(BaseOutputDirectory)bin\$(Configuration)\Packages</ArchiveOutputPath>
    <NuGetOutputPath>$(BaseOutputDirectory)bin\$(Configuration)\NuGetPackages</NuGetOutputPath>
    <ConfigurationSuffix Condition="'$(Configuration)' == 'Debug'">-debug</ConfigurationSuffix>
    <WebsiteDir Condition="'$(WebsiteDir)' == ''">$(BaseOutputDirectory)\bin\$(Configuration)\Website</WebsiteDir>
    <LastTestRunSummary>$(BaseOutputDirectory)\bin\LastTestRunSummary.cmd</LastTestRunSummary>
    <BuildInfoFile>$(BaseOutputDirectory)\bin\BuildInfo.cs</BuildInfoFile>
    <NuGetTool>NuGet.exe</NuGetTool>
    <NuGetBuildPath>$(BaseOutputDirectory)\obj\$(Configuration)\NuGet</NuGetBuildPath>
    <NuGetProperties>BuildVersion=$(BuildVersion)</NuGetProperties>
  </PropertyGroup>

  <!-- detect location of various SDKs and tools-->
  <PropertyGroup>
    <DotNet4Version>v4.0.30319</DotNet4Version>
    <SL2RefPath Condition="'$(SL2InstallPath)' == ''">$(Registry:HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Microsoft SDKs\Silverlight\v2.0\Install Path@Install Path)</SL2RefPath>
    <SL3RefPath Condition="'$(SL3RefPath)' == ''">$(ProgramFiles)\Reference Assemblies\Microsoft\Framework\Silverlight\v3.0</SL3RefPath>
    <SL4RefPath Condition="'$(SL4RefPath)' == ''">$(ProgramFiles)\Reference Assemblies\Microsoft\Framework\Silverlight\v4.0</SL4RefPath>
    <WP7RefPath Condition="'$(WP7RefPath)' == ''">$(ProgramFiles)\Reference Assemblies\Microsoft\Framework\Silverlight\v4.0\Profile\WindowsPhone</WP7RefPath>
    <WP71RefPath Condition="'$(WP71RefPath)' == ''">$(ProgramFiles)\Reference Assemblies\Microsoft\Framework\Silverlight\v4.0\Profile\WindowsPhone71</WP71RefPath>
    <NetCF20InstallRoot>$(Registry:HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\.NETCompactFramework\v2.0.0.0\InstallRoot)</NetCF20InstallRoot>
    <NetCF35InstallRoot>$(Registry:HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\.NETCompactFramework\v3.5.0.0\InstallRoot)</NetCF35InstallRoot>

    <!-- yes, this is broken but MSBuild does not support recursive registry access (where registry path is parameterized)
    so this will have to do. -->
    <MonoDefaultClr>$(Registry:HKEY_LOCAL_MACHINE\SOFTWARE\Novell\Mono@DefaultCLR)</MonoDefaultClr>
    <MonoInstallLocation Condition="'$(MonoInstallLocation)' == '' and $(MonoDefaultClr) != ''">$(ProgramFiles)\Mono-$(MonoDefaultClr)</MonoInstallLocation>

    <MSTest9>$(VS90COMNTOOLS)..\IDE\MSTest.exe</MSTest9>
    <MSTest10>$(VS100COMNTOOLS)..\IDE\MSTest.exe</MSTest10>

    <StyleCopTargetsFile>$(MSBuildExtensionsPath)\StyleCop\v4.5\StyleCop.Targets</StyleCopTargetsFile>
    <StyleCopProperties Condition="'$(DisableStyleCop)' == 'false' and Exists('$(StyleCopTargetsFile)')">StyleCopTargetsFile=$(StyleCopTargetsFile)</StyleCopProperties>
  </PropertyGroup>

  <!-- at this point, if $(BuildAllFrameworks)=='true' it means that the user has not requested 
    any specific framework, so we build all that are available -->
  <PropertyGroup Condition="'$(BuildAllFrameworks)' == 'true'">
    <BuildMono2>true</BuildMono2>
    <BuildSL2>true</BuildSL2>
    <BuildSL3>true</BuildSL3>
    <BuildSL4>true</BuildSL4>
    <BuildWP7>true</BuildWP7>
    <BuildWP71>true</BuildWP71>
    <BuildNetFX20>true</BuildNetFX20>
    <BuildNetFX35>true</BuildNetFX35>
    <BuildNetFX40>true</BuildNetFX40>
    <BuildNetCF20>true</BuildNetCF20>
    <BuildNetCF35>true</BuildNetCF35>

    <!-- now disable those that we know cannot be built -->
    <BuildMono2 Condition="'$(MonoInstallLocation)'==''">false</BuildMono2>
    <BuildSL2 Condition="'$(SL2RefPath)' == ''">false</BuildSL2>
    <BuildSL3 Condition="'$(SL3RefPath)' == ''">false</BuildSL3>
    <BuildSL4 Condition="'$(SL4RefPath)' == ''">false</BuildSL4>
    <BuildWP7 Condition="!Exists('$(WP7RefPath)')">false</BuildWP7>
    <BuildWP71 Condition="!Exists('$(WP71RefPath)')">false</BuildWP71>
    <BuildNetCF20 Condition="'$(NetCF20InstallRoot)' == ''">false</BuildNetCF20>
    <BuildNetCF35 Condition="'$(NetCF35InstallRoot)' == ''">false</BuildNetCF35>
    <BuildNetFX20 Condition="!Exists('$(WINDIR)\Microsoft.NET\Framework\v2.0.50727') == ''">false</BuildNetFX20>
    <BuildNetFX35 Condition="!Exists('$(WINDIR)\Microsoft.NET\Framework\v3.5') == ''">false</BuildNetFX35>
    <BuildNetFX40 Condition="!Exists('$(WINDIR)\Microsoft.NET\Framework\$(DotNet4Version)') == ''">false</BuildNetFX40>

    <!-- don't build 4.0 if we're using MSBuild 3.5 -->
    <BuildSL4 Condition="'$(MSBuildToolsVersion)'=='3.5'">false</BuildSL4>
    <BuildWP7 Condition="'$(MSBuildToolsVersion)'=='3.5'">false</BuildWP7>
    <BuildWP71 Condition="'$(MSBuildToolsVersion)'=='3.5'">false</BuildWP71>
    <BuildNetFX40 Condition="'$(MSBuildToolsVersion)'=='3.5'">false</BuildNetFX40>
  </PropertyGroup>

  <PropertyGroup>
     <DocReferencesNetFX20>-ref "$(WinDir)\Microsoft.NET\Framework\v2.0.50727"</DocReferencesNetFX20>
     <DocReferencesNetFX30>-ref "$(ProgramFiles)\Reference Assemblies\Microsoft\Framework\v3.0"</DocReferencesNetFX30>
     <DocReferencesNetFX35>-ref "$(ProgramFiles)\Reference Assemblies\Microsoft\Framework\v3.5"</DocReferencesNetFX35>
     <DocReferencesNetFX40>-ref "$(WinDir)\Microsoft.NET\Framework\$(DotNet4Version)"</DocReferencesNetFX40>
     <DocReferencesSL2>-ref "$(ProgramFiles)\Microsoft SDKs\Silverlight\v2.0\Reference Assemblies"</DocReferencesSL2>
     <DocReferencesSL3>-ref "$(ProgramFiles)\Reference Assemblies\Microsoft\Framework\Silverlight\v3.0"</DocReferencesSL3>
     <DocReferencesSL4>-ref "$(ProgramFiles)\Reference Assemblies\Microsoft\Framework\Silverlight\v4.0"</DocReferencesSL4>
     <DocReferencesWP7>-ref "$(ProgramFiles)\Reference Assemblies\Microsoft\Framework\Silverlight\v4.0\Profile\WindowsPhone"</DocReferencesWP7>
     <DocReferencesWP71>-ref "$(ProgramFiles)\Reference Assemblies\Microsoft\Framework\Silverlight\v4.0\Profile\WindowsPhone71"</DocReferencesWP71>
     <DocReferencesNetCF20>-ref "$(ProgramFiles)\Microsoft.NET\SDK\CompactFramework\v2.0\WindowsCE"</DocReferencesNetCF20>
     <DocReferencesNetCF35>-ref "$(ProgramFiles)\Microsoft.NET\SDK\CompactFramework\v3.5\WindowsCE"</DocReferencesNetCF35>
     <DocReferencesMono2>-ref "$(MonoInstallLocation)\lib\mono\2.0"</DocReferencesMono2>
  </PropertyGroup>

  <ItemGroup>
    <TargetFramework Include="Mono 2.x" Condition="'$(BuildMono2)' == 'true'">
        <ProjectFileSuffix>.mono2</ProjectFileSuffix>
        <ToolsVersion>3.5</ToolsVersion>
        <DocReferences>$(DocReferencesMono2)</DocReferences>
    </TargetFramework>
    <TargetFramework Include="Silverlight 2.0" Condition="'$(BuildSL2)'=='true'">
        <ProjectFileSuffix>.sl2</ProjectFileSuffix>
        <DocReferences>$(DocReferencesSL2)</DocReferences>
        <NuGetDir>sl2</NuGetDir>
    </TargetFramework>
    <TargetFramework Include="Silverlight 3.0" Condition="'$(BuildSL3)'=='true'">
        <ProjectFileSuffix>.sl3</ProjectFileSuffix>
        <DocReferences>$(DocReferencesSL3)</DocReferences>
        <NuGetDir>sl3</NuGetDir>
    </TargetFramework>
    <TargetFramework Include="Silverlight 4.0" Condition="'$(BuildSL4)'=='true'">
        <ProjectFileSuffix>.sl4</ProjectFileSuffix>
        <DocReferences>$(DocReferencesSL4)</DocReferences>
        <NuGetDir>sl4</NuGetDir>
    </TargetFramework>
    <TargetFramework Include="Silverlight for Windows Phone 7" Condition="'$(BuildWP7)'=='true'">
        <ProjectFileSuffix>.wp7</ProjectFileSuffix>
        <DocReferences>$(DocReferencesWP7)</DocReferences>
        <NuGetDir>sl3-wp</NuGetDir>
    </TargetFramework>
    <TargetFramework Include="Silverlight for Windows Phone 7.1" Condition="'$(BuildWP71)'=='true'">
        <ProjectFileSuffix>.wp71</ProjectFileSuffix>
        <DocReferences>$(DocReferencesWP71)</DocReferences>
        <NuGetDir>sl4-windowsphone71</NuGetDir>
    </TargetFramework>
    <TargetFramework Include=".NET Compact Framework 2.0" Condition="'$(BuildNetCF20)'=='true'">
        <ProjectFileSuffix>.netcf20</ProjectFileSuffix>
        <ToolsVersion>3.5</ToolsVersion>
        <DocReferences>$(DocReferencesNetCF20)</DocReferences>
    </TargetFramework>
    <TargetFramework Include=".NET Compact Framework 3.5" Condition="'$(BuildNetCF35)'=='true'">
        <ProjectFileSuffix>.netcf35</ProjectFileSuffix>
        <ToolsVersion>3.5</ToolsVersion>
        <DocReferences>$(DocReferencesNetCF35)</DocReferences>
    </TargetFramework>
    <TargetFramework Include=".NET Framework 2.0" Condition="'$(BuildNetFX20)'=='true'">
        <ProjectFileSuffix>.netfx20</ProjectFileSuffix>
        <ToolsVersion>3.5</ToolsVersion>
        <DocReferences>$(DocReferencesNetFX20)</DocReferences>
        <NuGetDir>net20</NuGetDir>
    </TargetFramework>
    <TargetFramework Include=".NET Framework 3.5" Condition="'$(BuildNetFX35)'=='true'">
        <ProjectFileSuffix>.netfx35</ProjectFileSuffix>
        <ToolsVersion>3.5</ToolsVersion>
        <DocReferences>$(DocReferencesNetFX20) $(DocReferencesNetFX30) $(DocReferencesNetFX35)</DocReferences>
        <NuGetDir>net35</NuGetDir>
    </TargetFramework>
    <TargetFramework Include=".NET Framework 4.0" Condition="'$(BuildNetFX40)'=='true'">
        <ProjectFileSuffix>.netfx40</ProjectFileSuffix>
        <ToolsVersion>4.0</ToolsVersion>
        <DocReferences>$(DocReferencesNetFX40)</DocReferences>
        <NuGetDir>net40</NuGetDir>
    </TargetFramework>
  </ItemGroup>

  <ItemGroup>
    <WebsiteFiles Include="..\Tools\WebsiteFiles\*.png" />
    <WebsiteFiles Include="..\Tools\WebsiteFiles\*.css" />
    <WebsiteGenFiles Include="..\Tools\WebsiteFiles\*.xsl" />
  </ItemGroup>

  <Target Name="All" DependsOnTargets="DeepClean;Clean;Build;BuildTests;RunTests;Documentation">
  </Target>

  <Target Name="NightlyBuild">
     <PropertyGroup>
       <CommonProperties>BuildLabel=$(BuildLabel);BuildVersion=$(BuildVersion);IsNightlyBuild=true</CommonProperties>
     </PropertyGroup>
     <MSBuild Projects="$(MSBuildProjectFile)" Targets="DeepClean;Clean;Build;DumpApi;XSD;Documentation;Archive;Installer;NuGetPackage;BuildTests;Web" Properties="Configuration=Release;$(CommonProperties)" />
     <MSBuild Projects="$(MSBuildProjectFile)" Targets="Clean;Build;DumpApi;XSD;Documentation;Archive;Installer;NuGetPackage;BuildTests;RunNightlyTests" Properties="Configuration=Debug;$(CommonProperties)" />
     <CallTarget Targets="SourceArchive" />
  </Target>

  <Target Name="Rebuild" DependsOnTargets="Clean;Build">
  </Target>

  <Target Name="Build">
    <PropertyGroup>
        <BuildInfoFileContent>
// automatically generated
[assembly: System.Reflection.AssemblyProduct("$(BuildProductName)")]
</BuildInfoFileContent>
    </PropertyGroup>

    <MakeDir Directories="$(BaseOutputDirectory)\bin" />

    <ReadLinesFromFile File="$(BuildInfoFile)" Condition="Exists('$(BuildInfoFile)')">
        <Output TaskParameter="Lines" ItemName="CurrentBuildInfoFileContent" />
    </ReadLinesFromFile>

    <WriteLinesToFile File="$(BuildInfoFile)" 
            Lines='$(BuildInfoFileContent)'
            Overwrite="true" 
            Condition="'$(BuildInfoFileContent)' != '@(CurrentBuildInfoFileContent)' " />
    <MSBuild Projects="NLog\NLog%(TargetFramework.ProjectFileSuffix).csproj" 
             Targets="Build" 
             Properties="$(StyleCopProperties);%(TargetFramework.Properties);BaseOutputDirectory=$(BaseOutputDirectory);BuildInfoFile=$(BuildInfoFile)" 
             ToolsVersion="%(TargetFramework.ToolsVersion)" 
             ContinueOnError="$(IgnoreBuildFailures)" 
             StopOnFirstFailure="false" />
    <MSBuild Projects="NLog.Extended\NLog.Extended%(TargetFramework.ProjectFileSuffix).csproj" 
             Targets="Build" 
             Properties="$(StyleCopProperties);%(TargetFramework.Properties);BaseOutputDirectory=$(BaseOutputDirectory);BuildInfoFile=$(BuildInfoFile)" 
             ToolsVersion="%(TargetFramework.ToolsVersion)" 
             ContinueOnError="$(IgnoreBuildFailures)" 
             StopOnFirstFailure="false"
             Condition="Exists('NLog.Extended\NLog.Extended%(TargetFramework.ProjectFileSuffix).csproj')" />
    <MSBuild Projects="InstallNLogConfig\InstallNLogConfig%(TargetFramework.ProjectFileSuffix).csproj" 
             Targets="Build" 
             Properties="$(StyleCopProperties);%(TargetFramework.Properties);BaseOutputDirectory=$(BaseOutputDirectory);BuildInfoFile=$(BuildInfoFile)" 
             ToolsVersion="%(TargetFramework.ToolsVersion)" 
             ContinueOnError="$(IgnoreBuildFailures)" 
             StopOnFirstFailure="false"
             Condition="Exists('InstallNLogConfig\InstallNLogConfig%(TargetFramework.ProjectFileSuffix).csproj')" />

    <CallTarget Targets="BuildNLogC" />
  </Target>

  <Target Name="BuildNLogC" Condition=" '$(BuildNetFX40)'=='true' ">
    <MSBuild Projects="NLogC\NLogC.netfx40.vcxproj" Properties="BaseOutputDirectory=$(BaseOutputDirectory);Configuration=$(Configuration);Platform=Win32" />
    <MSBuild Projects="NLogC\NLogC.netfx40.vcxproj" Properties="BaseOutputDirectory=$(BaseOutputDirectory);Configuration=$(Configuration);Platform=x64" />
    <Copy SourceFiles="NLogC\NLogC.h;NLogC\NLogger.h" DestinationFolder="$(BaseOutputDirectory)\bin\$(Configuration)\.NET Framework 4.0\NLogC\include" />
  </Target>

  <Target Name="BuildNLogCTests" DependsOnTargets="BuildNLogC" Condition=" '$(BuildNetFX40)'=='true' ">
    <MSBuild Projects="..\tests\NLogC.UnitTests\NLogC.UnitTests.netfx40.vcxproj" Properties="BaseOutputDirectory=$(BaseOutputDirectory);Configuration=$(Configuration);Platform=Win32" />
    <MSBuild Projects="..\tests\NLogC.UnitTests\NLogC.UnitTests.netfx40.vcxproj" Properties="BaseOutputDirectory=$(BaseOutputDirectory);Configuration=$(Configuration);Platform=x64" />
  </Target>

  <Target Name="BuildTests">
    <Copy DestinationFolder="$(ToolsDir)" SourceFiles="..\tools\DeployNetCF.exe" />
    <Copy DestinationFolder="$(BaseOutputDirectory)\bin" SourceFiles="$(MSBuildProjectFile);..\tests\CreateTestUsers.cmd;..\tests\DeleteTestUsers.cmd" />
    <MSBuild Projects="..\tests\NLog.UnitTests\NLog.UnitTests%(TargetFramework.ProjectFileSuffix).csproj" 
             Targets="Build" 
             Properties="%(TargetFramework.Properties);BaseOutputDirectory=$(BaseOutputDirectory)" 
             ContinueOnError="$(IgnoreBuildFailures)" 
             StopOnFirstFailure="false" />
    <MSBuild Projects="..\tests\NLog.BinaryCompatTests\NLog.BinaryCompatTests%(TargetFramework.ProjectFileSuffix).csproj" 
             Targets="Build" 
             Properties="%(TargetFramework.Properties);BaseOutputDirectory=$(BaseOutputDirectory)" 
             ContinueOnError="$(IgnoreBuildFailures)" 
             Condition="Exists('..\tests\NLog.BinaryCompatTests\NLog.BinaryCompatTests%(TargetFramework.ProjectFileSuffix).csproj')" 
             StopOnFirstFailure="false" />
    <CallTarget Targets="BuildTestResultSummaryTool" />
    <CallTarget Targets="BuildSLTestRunner" />
    <CallTarget Targets="BuildNLogCTests" />
    <CallTarget Targets="BuildComApiTests" />
  </Target>
 
  <Target Name="BuildComApiTests">
    <Exec Command='"..\tests\NLog.ComInteropTests\Deploy%(TargetFramework.ProjectFileSuffix).cmd" "$(BaseOutputDirectory)\bin\$(Configuration)\%(TargetFramework.Identity)"'
          Condition="Exists('..\tests\NLog.ComInteropTests\Deploy%(TargetFramework.ProjectFileSuffix).cmd')" />
  </Target>

  <Target Name="Web" DependsOnTargets="DumpApi;BuildDocPagesTool"
    Inputs="$(BaseOutputDirectory)\bin\$(Configuration)\NLogMerged.api.xml;$(BuildDocPages);@(WebsiteFiles);@(WebsiteGenFiles)"
    Outputs="$(WebsiteDir)\static.tar.bz2;$(WebsiteDir)\generated.tar.bz2;">

    <Copy SourceFiles="@(WebsiteFiles)" DestinationFolder="$(WebsiteDir)\static" />
    <Exec Command='"$(BuildDocPages)" "NLogMerged.api.xml" "$(MSBuildProjectDirectory)\..\tools\WebsiteFiles\style.xsl" "$(WebsiteDir)\generated" "$(MSBuildProjectDirectory)\.." html web'
          WorkingDirectory="$(BaseOutputDirectory)\bin\$(Configuration)" />
    <Exec Command='"$(Tar)" -c -f generated.tar generated' WorkingDirectory="$(WebsiteDir)" />
    <Exec Command='"$(BZip2)" -f generated.tar' WorkingDirectory="$(WebsiteDir)" />
    <Exec Command='"$(Tar)" -c -f ..\static.tar *' WorkingDirectory="$(WebsiteDir)\static" />
    <Exec Command='"$(BZip2)" -f static.tar' WorkingDirectory="$(WebsiteDir)" />
  </Target>

  <Target Name="RunTests">
    <Exec Command="$(BaseOutputDirectory)\bin\CreateTestUsers.cmd" IgnoreExitCode="true" />
    <CallTarget Targets="DeleteTrxFiles" />
    <CallTarget Targets="PrepareTestResultSummary" />
    <!-- <CallTarget Targets="Mono2Test" Condition="'$(BuildMono2)'=='true'"/> -->
    <CallTarget Targets="NetFx20Test" Condition="'$(BuildNetFX20)'=='true'"/>
    <CallTarget Targets="NetFx35Test" Condition="'$(BuildNetFX35)'=='true'"/>
    <CallTarget Targets="NetFx40Test" Condition="'$(BuildNetFX40)'=='true'"/>
    <CallTarget Targets="NetCF20Test" Condition="'$(BuildNetCF20)'=='true'"/>
    <CallTarget Targets="NetCF35Test" Condition="'$(BuildNetCF35)'=='true'"/>
    <CallTarget Targets="SL2Test" Condition="'$(BuildSL2)'=='true'"/>
    <CallTarget Targets="SL3Test" Condition="'$(BuildSL3)'=='true'"/>
    <CallTarget Targets="SL4Test" Condition="'$(BuildSL4)'=='true'"/>
    <CallTarget Targets="WP7Test" Condition="'$(BuildWP7)'=='true'"/>
    <CallTarget Targets="WP71Test" Condition="'$(BuildWP71)'=='true'"/>
    <CallTarget Targets="RunComApiTests" />
    <Exec Command="$(BaseOutputDirectory)\bin\DeleteTestUsers.cmd" IgnoreExitCode="true" />
  </Target>

  <Target Name="RunNightlyTests">
    <Exec Command="$(BaseOutputDirectory)\bin\CreateTestUsers.cmd" IgnoreExitCode="true" />
    <CallTarget Targets="DeleteTrxFiles" />
    <Exec Command='NLogC.UnitTests.exe' WorkingDirectory="$(BaseOutputDirectory)\bin\$(Configuration)\.NET Framework 4.0\NLogC\x86" />
    <Exec Command='"$(MSTest10)" /nologo /testcontainer:NLog.UnitTests.dll /resultsfile:TestResults.trx'
          WorkingDirectory="$(BaseOutputDirectory)\bin\$(Configuration)\.NET Framework 4.0" 
          Condition="Exists('$(MSTest10)')" />
    <Exec Command="$(BaseOutputDirectory)\bin\DeleteTestUsers.cmd" IgnoreExitCode="true" />
  </Target>

  <Target Name="RunComApiTests">
    <Exec Command="NLog.ComInteropTest.cmd"
          WorkingDirectory="$(BaseOutputDirectory)\bin\$(Configuration)\%(TargetFramework.Identity)"
          Condition="Exists('$(BaseOutputDirectory)\bin\$(Configuration)\%(TargetFramework.Identity)\NLog.ComInteropTest.cmd')" />
  </Target>

  <Target Name="NetFx20Test">
    <Exec Command='"$(MSTest10)" /nologo /testcontainer:NLog.UnitTests.dll /resultsfile:TestResults.trx' 
          WorkingDirectory="$(BaseOutputDirectory)\bin\$(Configuration)\.NET Framework 2.0" 
          Condition="Exists('$(MSTest10)')" IgnoreExitCode="true" />
  </Target>                

  <Target Name="NetFx35Test">
    <Exec Command='"$(MSTest10)" /nologo /testcontainer:NLog.UnitTests.dll /resultsfile:TestResults.trx' 
          WorkingDirectory="$(BaseOutputDirectory)\bin\$(Configuration)\.NET Framework 3.5" 
          Condition="Exists('$(MSTest10)')" IgnoreExitCode="true" />
  </Target>

  <Target Name="NetFx40Test">
    <!-- run both 32 and 64 bit versions of NLogC unit tests -->

    <!-- <Exec Command='NLogC.UnitTests.exe' WorkingDirectory="$(BaseOutputDirectory)\bin\$(Configuration)\.NET Framework 4.0\NLogC\amd64" /> -->
    <Exec Command='NLogC.UnitTests.exe' WorkingDirectory="$(BaseOutputDirectory)\bin\$(Configuration)\.NET Framework 4.0\NLogC\x86" />
    <Exec Command='"$(MSTest10)" /nologo /testcontainer:NLog.UnitTests.dll /resultsfile:TestResults.trx'
          WorkingDirectory="$(BaseOutputDirectory)\bin\$(Configuration)\.NET Framework 4.0" 
          Condition="Exists('$(MSTest10)')" IgnoreExitCode="true" />
  </Target>

  <Target Name="NetCf20Test" DependsOnTargets="DeployNetCf20ToEmulator">
    <Exec Command='"$(MSTest9)" /nologo /runconfig:SmartDeviceTestRun.testrunConfig /testcontainer:NLog.UnitTests.dll /resultsfile:TestResults.trx'
          WorkingDirectory="$(BaseOutputDirectory)\bin\$(Configuration)\.NET Compact Framework 2.0"
          Condition="Exists('$(MSTest9)')" IgnoreExitCode="true" />
    <Exec Command="TaskKill /f /im DeviceEmulator.exe 2&gt; nul" IgnoreExitCode="true" />
  </Target>

  <Target Name="NetCf35Test" DependsOnTargets="DeployNetCf35ToEmulator">
    <Exec Command='"$(MSTest9)" /nologo /runconfig:SmartDeviceTestRun.testrunConfig /testcontainer:NLog.UnitTests.dll /resultsfile:TestResults.trx'
          WorkingDirectory="$(BaseOutputDirectory)\bin\$(Configuration)\.NET Compact Framework 3.5"
          Condition="Exists('$(MSTest9)')" IgnoreExitCode="true" />
    <Exec Command="TaskKill /f /im DeviceEmulator.exe 2&gt; nul" IgnoreExitCode="true" />
  </Target>

  <Target Name="SL2Test">
    <Exec Command='"$(SLTestRunner)" NLog.UnitTests.xap SL2'
          WorkingDirectory="$(BaseOutputDirectory)\bin\$(Configuration)\Silverlight 2.0" IgnoreExitCode="true" />
  </Target>

  <Target Name="SL3Test">
    <Exec Command='"$(SLTestRunner)" NLog.UnitTests.xap SL3'
          WorkingDirectory="$(BaseOutputDirectory)\bin\$(Configuration)\Silverlight 3.0" IgnoreExitCode="true" />
  </Target>

  <Target Name="SL4Test">
    <Exec Command='"$(SLTestRunner)" NLog.UnitTests.xap SL4'
          WorkingDirectory="$(BaseOutputDirectory)\bin\$(Configuration)\Silverlight 4.0" IgnoreExitCode="true" />
  </Target>

  <Target Name="WP7Test">
    <Exec Command="TaskKill /f /im XDE.exe 2&gt; nul" IgnoreExitCode="true" />
    <Exec Command='"$(SLTestRunner)" NLog.UnitTests.xap WP7 -guid 3cf9fab9-588c-49c8-8a45-ef071442304f -icon ApplicationIcon.png'
          WorkingDirectory="$(BaseOutputDirectory)\bin\$(Configuration)\Silverlight for Windows Phone 7" IgnoreExitCode="true" />
    <Exec Command="TaskKill /f /im XDE.exe 2&gt; nul" IgnoreExitCode="true" />
  </Target>

  <Target Name="WP71Test">
    <Exec Command="TaskKill /f /im XDE.exe 2&gt; nul" IgnoreExitCode="true" />
    <Exec Command='"$(SLTestRunner)" NLog.UnitTests.xap WP71 -guid 3cf9fab9-588c-49c8-8a45-ef071442304f -icon ApplicationIcon.png'
          WorkingDirectory="$(BaseOutputDirectory)\bin\$(Configuration)\Silverlight for Windows Phone 7.1" IgnoreExitCode="true" />
    <Exec Command="TaskKill /f /im XDE.exe 2&gt; nul" IgnoreExitCode="true" />
  </Target>

  <Target Name="CheckinSuite">
    <CallTarget Targets="SyncProjectItems" />
    <CallTarget Targets="DeepClean" />
    <CallTarget Targets="Rebuild" />
    <CallTarget Targets="DumpApi" />
    <CallTarget Targets="BuildTests" />
    <CallTarget Targets="RunTests" />
    <CallTarget Targets="PrepareTestResultSummary" />
  </Target>

  <Target Name="DeleteTrxFiles">
    <Delete Files='$(BaseOutputDirectory)\bin\$(Configuration)\%(TargetFramework.Identity)\TestResults.trx' />
  </Target>

  <Target Name="PrepareTestResultSummary">
    <WriteLinesToFile File="$(LastTestRunSummary)" Lines='@echo off' Overwrite="true" />
    <WriteLinesToFile File="$(LastTestRunSummary)" Lines='echo ---------------------' />
    <WriteLinesToFile File="$(LastTestRunSummary)" Lines='echo Test run summary:' />
    <WriteLinesToFile File="$(LastTestRunSummary)" Lines='echo ---------------------' />
    <WriteLinesToFile File="$(LastTestRunSummary)" Lines='%~dp0Tools\DumpTestResultSummary.exe all %~dp0$(Configuration) %*' />
  </Target>

  <Target Name="BuildMergedDocumentation">
    <MSBuild Projects="NLog.Extended\NLog.Extended.doc.csproj" 
             Targets="Build" 
             Properties="$(StyleCopProperties);BaseOutputDirectory=$(BaseOutputDirectory)" 
             ContinueOnError="$(BuildAllFrameworks)" 
             StopOnFirstFailure="false" />
    <Exec Command='"$(WinDir)\Microsoft.NET\Framework\v3.5\MSBuild.exe" Docs\NLog.shfbproj /p:Framework="Documentation" /p:Configuration=$(Configuration) /p:BuildLabel="$(BuildLabel)" /p:BuildVersion="$(BuildVersion)"' ContinueOnError="$(BuildAllFrameworks)" />
  </Target>

  <Target Name="BuildIndividualDocumentation">
    <Exec Command='"$(WinDir)\Microsoft.NET\Framework\v3.5\MSBuild.exe" Docs\NLog.shfbproj /p:Framework="%(TargetFramework.Identity)" /p:Configuration=$(Configuration) /p:BuildLabel="$(BuildLabel)" /p:BuildVersion="$(BuildVersion)"' ContinueOnError="$(BuildAllFrameworks)" />
  </Target>

  <Target Name="PostProcessDocumentation">
    <MSBuild Projects="$(MSBuildProjectFile)" Targets="PostProcessSingleDoc" Properties="DocBuildDir=$(BaseOutputDirectory)\bin\$(Configuration)\%(TargetFramework.Identity)" ContinueOnError="$(BuildAllFrameworks)" />
  </Target>

  <Target Name="PostProcessSingleDoc">
    <Copy SourceFiles="$(DocBuildDir)\doc\NLog.chm" DestinationFolder="$(DocBuildDir)" />
    <Delete Files="$(DocBuildDir)\doc.tar" />
    <Delete Files="$(DocBuildDir)\doc.tar.bz2" />
    <Exec Command='"$(Tar)" --exclude=*.chm --exclude=*.log -c -f doc.tar doc' WorkingDirectory="$(DocBuildDir)" />
    <Exec Command='"$(BZip2)" doc.tar' WorkingDirectory="$(DocBuildDir)" />
    <RemoveDir Directories="$(DocBuildDir)\doc" />
  </Target>

  <Target Name="IndividualDocumentation" DependsOnTargets="BuildIndividualDocumentation;PostProcessDocumentation">
  </Target>

  <Target Name="Documentation" DependsOnTargets="BuildMergedDocumentation">
    <MSBuild Projects="$(MSBuildProjectFile)" Targets="PostProcessSingleDoc" Properties="DocBuildDir=$(BaseOutputDirectory)\bin\$(Configuration)\Documentation" />
  </Target>

  <Target Name="NuGetPackage" DependsOnTargets="NuGetBasePackage;NuGetExtendedPackage;NuGetConfigPackage;NuGetSchemaPackage">
  </Target>

  <Target Name="NuGetBasePackage">
    <ItemGroup>
      <NuGetFiles Include="NuGet/NLog/**" />
    </ItemGroup>

    <ItemGroup>
      <NuGetSourceFiles Include="NLog/**/*.cs" />
    </ItemGroup>
	
    <!-- prepare static files -->
    <RemoveDir Directories="$(NuGetBuildPath)\NLog" />
    <Copy SourceFiles="@(NuGetFiles)" DestinationFolder="$(NuGetBuildPath)\NLog\%(RecursiveDir)" />
	
    <!-- copy binaries -->
    <MakeDir Directories="$(NuGetBuildPath)\NLog\lib\%(TargetFramework.NuGetDir)" />
    <Copy DestinationFolder="$(NuGetBuildPath)\NLog\lib\%(TargetFramework.NuGetDir)" SourceFiles="$(BaseOutputDirectory)\bin\$(Configuration)\%(TargetFramework.Identity)\NLog.dll" Condition=" '%(TargetFramework.NuGetDir)' != '' "  />
    <Copy DestinationFolder="$(NuGetBuildPath)\NLog\lib\%(TargetFramework.NuGetDir)" SourceFiles="$(BaseOutputDirectory)\bin\$(Configuration)\%(TargetFramework.Identity)\NLog.pdb"  Condition=" '%(TargetFramework.NuGetDir)' != '' " />
    <Copy DestinationFolder="$(NuGetBuildPath)\NLog\lib\%(TargetFramework.NuGetDir)" SourceFiles="$(BaseOutputDirectory)\bin\$(Configuration)\%(TargetFramework.Identity)\NLog.xml"  Condition=" '%(TargetFramework.NuGetDir)' != '' " />

    <!-- copy sources -->
    <Copy SourceFiles="@(NuGetSourceFiles)" DestinationFolder="$(NuGetBuildPath)\NLog\src\src\NLog\%(RecursiveDir)" />
    <Copy SourceFiles="$(BuildInfoFile)" DestinationFolder="$(NuGetBuildPath)\NLog\src\build\bin" />

    <TokenReplace Path="$(NuGetBuildPath)\NLog\NLog.nuspec" Token="$BuildVersion$" Replacement="$(BuildVersion)" />
    
    <!-- package -->
    <MakeDir Directories="$(NuGetOutputPath)" />
    <Exec Command='"$(NuGetTool)" pack NLog.nuspec -Symbols -OutputDirectory "$(NuGetOutputPath)"' WorkingDirectory="$(NuGetBuildPath)\NLog" />
  </Target>

  <Target Name="NuGetExtendedPackage">
    <ItemGroup>
      <NuGetExtendedFiles Include="NuGet/NLog.Extended/**" />
    </ItemGroup>
    <ItemGroup>
      <NuGetExtendedSourceFiles Include="NLog.Extended/**/*.cs" />
    </ItemGroup>
	
    <!-- prepare static files -->
    <RemoveDir Directories="$(NuGetBuildPath)\NLog.Extended" />
    <Copy SourceFiles="@(NuGetExtendedFiles)" DestinationFolder="$(NuGetBuildPath)\NLog.Extended\%(RecursiveDir)" />
	
    <!-- copy binaries -->
    <MakeDir Directories="$(NuGetBuildPath)\NLog.Extended\lib\%(TargetFramework.NuGetDir)-full" 
          Condition=" '%(TargetFramework.NuGetDir)' != '' and Exists('$(BaseOutputDirectory)\bin\$(Configuration)\%(TargetFramework.Identity)\NLog.Extended.pdb')" />
    <Copy DestinationFolder="$(NuGetBuildPath)\NLog.Extended\lib\%(TargetFramework.NuGetDir)-full" 
          SourceFiles="$(BaseOutputDirectory)\bin\$(Configuration)\%(TargetFramework.Identity)\NLog.Extended.dll" 
          Condition=" '%(TargetFramework.NuGetDir)' != '' and Exists('$(BaseOutputDirectory)\bin\$(Configuration)\%(TargetFramework.Identity)\NLog.Extended.dll')" />
    <Copy DestinationFolder="$(NuGetBuildPath)\NLog.Extended\lib\%(TargetFramework.NuGetDir)-full" 
          SourceFiles="$(BaseOutputDirectory)\bin\$(Configuration)\%(TargetFramework.Identity)\NLog.Extended.pdb"
          Condition=" '%(TargetFramework.NuGetDir)' != '' and Exists('$(BaseOutputDirectory)\bin\$(Configuration)\%(TargetFramework.Identity)\NLog.Extended.pdb')" />
    <Copy DestinationFolder="$(NuGetBuildPath)\NLog.Extended\lib\%(TargetFramework.NuGetDir)-full" 
          SourceFiles="$(BaseOutputDirectory)\bin\$(Configuration)\%(TargetFramework.Identity)\NLog.Extended.xml"
          Condition=" '%(TargetFramework.NuGetDir)' != '' and Exists('$(BaseOutputDirectory)\bin\$(Configuration)\%(TargetFramework.Identity)\NLog.Extended.xml')" />
		  
    <!-- copy sources -->
    <Copy SourceFiles="@(NuGetExtendedSourceFiles)" DestinationFolder="$(NuGetBuildPath)\NLog.Extended\src\src\NLog.Extended\%(RecursiveDir)" />
    <Copy SourceFiles="$(BuildInfoFile)" DestinationFolder="$(NuGetBuildPath)\NLog.Extended\src\build\bin" />

    <TokenReplace Path="$(NuGetBuildPath)\NLog.Extended\NLog.Extended.nuspec" Token="$BuildVersion$" Replacement="$(BuildVersion)" />

    <!-- package -->	  
    <MakeDir Directories="$(NuGetOutputPath)" />
    <Exec Command='"$(NuGetTool)" pack NLog.Extended.nuspec -Symbols -OutputDirectory "$(NuGetOutputPath)"' WorkingDirectory="$(NuGetBuildPath)\NLog.Extended" />
  </Target>

  <Target Name="NuGetConfigPackage">
    <ItemGroup>
      <NuGetConfigFiles Include="NuGet/NLog.Config/**" />
    </ItemGroup>
	
    <!-- prepare static files -->
    <RemoveDir Directories="$(NuGetBuildPath)\NLog.Config" />
    <Copy SourceFiles="@(NuGetConfigFiles)" DestinationFolder="$(NuGetBuildPath)\NLog.Config\%(RecursiveDir)" />
    <Copy SourceFiles="$(BaseOutputDirectory)\bin\$(Configuration)\NLog.xsd"
          DestinationFolder="$(NuGetBuildPath)\NLog.Config\content" />
	
    <TokenReplace Path="$(NuGetBuildPath)\NLog.Config\NLog.Config.nuspec" Token="$BuildVersion$" Replacement="$(BuildVersion)" />

    <!-- package -->	  
    <MakeDir Directories="$(NuGetOutputPath)" />
    <Exec Command='"$(NuGetTool)" pack NLog.Config.nuspec -OutputDirectory "$(NuGetOutputPath)"' WorkingDirectory="$(NuGetBuildPath)\NLog.Config" />
  </Target>

  <Target Name="NuGetSchemaPackage">
    <ItemGroup>
      <NuGetSchemaFiles Include="NuGet/NLog.Schema/**" />
    </ItemGroup>
	
    <!-- prepare static files -->
    <RemoveDir Directories="$(NuGetBuildPath)\NLog.Schema" />
    <Copy SourceFiles="@(NuGetSchemaFiles)" DestinationFolder="$(NuGetBuildPath)\NLog.Schema\%(RecursiveDir)" />
    <Copy SourceFiles="$(BaseOutputDirectory)\bin\$(Configuration)\NLog.xsd"
          DestinationFolder="$(NuGetBuildPath)\NLog.Schema\content" />
	
    <TokenReplace Path="$(NuGetBuildPath)\NLog.Schema\NLog.Schema.nuspec" Token="$BuildVersion$" Replacement="$(BuildVersion)" />

    <!-- package -->	  
    <MakeDir Directories="$(NuGetOutputPath)" />
    <Exec Command='"$(NuGetTool)" pack NLog.Schema.nuspec -OutputDirectory "$(NuGetOutputPath)" -Properties $(NuGetProperties)' WorkingDirectory="$(NuGetBuildPath)\NLog.Schema" />
  </Target>                                                                                       


  <Target Name="Installer">
     <PropertyGroup>
       <CommonInstallerProperties>Configuration=$(Configuration);BuildLabelDash=$(BuildLabelDash);BuildLabel=$(BuildLabel);BuildVersion=$(BuildVersion)</CommonInstallerProperties>
     </PropertyGroup>
     <MSBuild Projects="..\tools\Installer\Installer.wixproj" Properties="Flavor=NetFx;$(CommonInstallerProperties)" />
     <MSBuild Projects="..\tools\Installer\Installer.wixproj" Properties="Flavor=SL;$(CommonInstallerProperties)" />
     <MSBuild Projects="..\tools\Installer\Installer.wixproj" Properties="Flavor=NetCf;$(CommonInstallerProperties)" />
     <MSBuild Projects="..\tools\Installer\Installer.wixproj" Properties="Flavor=All;$(CommonInstallerProperties)" />
     <MSBuild Projects="..\tools\Installer\Installer.wixproj" Properties="Flavor=Mono;$(CommonInstallerProperties)" />
     <MSBuild Projects="..\tools\Installer\Installer.wixproj" Properties="Flavor=WP;$(CommonInstallerProperties)" />
  </Target>

  <Target Name="DeployNetCf20ToEmulator">
    <Exec Command="TaskKill /f /im DeviceEmulator.exe 2&gt; nul" IgnoreExitCode="true" />
    <Exec Command="$(DeployNetCF) 3C41C503-53EF-4c2a-8DD4-A8217CAD115E E282E6BE-C7C3-4ece-916A-88FB1CF8AF3C 2.0 \Windows\NETCFv2.ppc.armv4.cab" />
  </Target>

  <Target Name="DeployNetCf35ToEmulator">
    <Exec Command="TaskKill /f /im DeviceEmulator.exe 2&gt; nul" IgnoreExitCode="true" />
    <Exec Command="$(DeployNetCF) 3C41C503-53EF-4c2a-8DD4-A8217CAD115E E282E6BE-C7C3-4ece-916A-88FB1CF8AF3C 3.5 \Windows\NETCFv35.ppc.armv4.cab" />
  </Target>

  <Target Name="BuildSLTestRunner">
    <MSBuild Projects="..\tools\SilverlightConsoleRunner\SilverlightConsoleRunner.csproj" />
  </Target>

  <Target Name="BuildTestResultSummaryTool">
    <MSBuild Projects="..\tools\DumpTestResultSummary\DumpTestResultSummary.csproj" />
  </Target>

  <Target Name="BuildSyncProjectItemsTool">
    <MSBuild Projects="..\tools\SyncProjectItems\SyncProjectItems.csproj" />
  </Target>

  <Target Name="SyncProjectItems" DependsOnTargets="BuildSyncProjectItemsTool">
    <Exec Command='"$(SyncProjectItems)" ProjectFileInfo.xml' WorkingDirectory="NLog" />
    <Exec Command='"$(SyncProjectItems)" ProjectFileInfo.xml' WorkingDirectory="NLog.Extended" />
    <Exec Command='"$(SyncProjectItems)" ProjectFileInfo.xml' WorkingDirectory="..\Tests\NLog.UnitTests" />
    <Exec Command='"$(SyncProjectItems)" ProjectFileInfo.xml' WorkingDirectory="..\Tests\SampleExtensions" />
  </Target>

  <Target Name="BuildApiDumpTool">
    <MSBuild Projects="..\tools\DumpApiXml\DumpApiXml.csproj" />
  </Target>

  <Target Name="BuildApiMergeTool">
    <MSBuild Projects="..\tools\MergeApiXml\MergeApiXml.csproj" />
  </Target>

  <Target Name="BuildDocPagesTool">
    <MSBuild Projects="..\tools\BuildDocPages\BuildDocPages.csproj" />
  </Target>

  <Target Name="BuildDocPages" DependsOnTargets="BuildDocPagesTool">
  </Target>

  <Target Name="Tools" DependsOnTargets="BuildApiDumpTool;BuildDocPagesTool;BuildApiMergeTool;BuildSyncProjectItemsTool;BuildSLTestRunner;BuildTestResultSummaryTool;BuildMakeNLogXSDTool">
  </Target>

  <Target Name="DumpApi" DependsOnTargets="BuildApiDumpTool;BuildApiMergeTool"
    Inputs="@(TargetFramework -> '$(BaseOutputDirectory)\bin\$(Configuration)\%(Identity)\NLog.dll');$(DumpApiXml);$(MergeApiXml)"
    Outputs="$(BaseOutputDirectory)\bin\$(Configuration)\NLogMerged.api.xml"
    >
    <Exec Command='"$(DumpApiXml)" -assembly NLog.dll -assembly NLog.Extended.dll -output API\NLog.api %(TargetFramework.DocReferences)'
          WorkingDirectory="$(BaseOutputDirectory)\bin\$(Configuration)\%(TargetFramework.Identity)"
          ContinueOnError="$(BuildAllFrameworks)" />
    <Exec Command='"$(MergeApiXml)" "$(BaseOutputDirectory)\bin\$(Configuration)"' />
  </Target>

  <Target Name="BuildMakeNLogXSDTool">
    <MSBuild Projects="..\tools\MakeNLogXSD\MakeNLogXSD.csproj" />
  </Target>

  <Target Name="XSD" DependsOnTargets="BuildMakeNLogXSDTool;DumpApi"
    Inputs="@(TargetFramework -> '$(BaseOutputDirectory)\bin\$(Configuration)\%(Identity)\API\NLog.api');
         $(BaseOutputDirectory)\bin\$(Configuration)\NLogMerged.api.xml"
    Outputs="@(TargetFramework -> '$(BaseOutputDirectory)\bin\$(Configuration)\%(Identity)\NLog%(ProjectFileSuffix).xsd');
            $(BaseOutputDirectory)\bin\$(Configuration)\NLog.xsd">
    <Exec Command='"$(MakeNLogXSD)" -api API\NLog.api -out NLog%(ProjectFileSuffix).xsd -xmlns http://www.nlog-project.org/schemas/NLog%(ProjectFileSuffix).xsd'
          WorkingDirectory="$(BaseOutputDirectory)\bin\$(Configuration)\%(TargetFramework.Identity)"
          ContinueOnError="$(BuildAllFrameworks)" />
    <Exec Command='"$(MakeNLogXSD)" -api NLogMerged.api.xml -out NLog.xsd'
          WorkingDirectory="$(BaseOutputDirectory)\bin\$(Configuration)"
          ContinueOnError="$(BuildAllFrameworks)" />
  </Target>

  <Target Name="Clean">
     <RemoveDir Directories="@(TargetFramework -> '$(BaseOutputDirectory)bin\$(Configuration)\%(Identity)')" />
     <RemoveDir Directories="@(TargetFramework -> '$(BaseOutputDirectory)obj\$(Configuration)\%(Identity)')" />
  </Target>

  <Target Name="BeforeArchive">
    <PropertyGroup>
      <ArchiveSuffix></ArchiveSuffix>
      <ArchiveSuffix Condition=" '$(BuildLabelDash)' != '' ">$(BuildLabelDash)</ArchiveSuffix>
    </PropertyGroup>
    <MakeDir Directories="$(ArchiveOutputPath)" />
  </Target>

  <Target Name="Archive" DependsOnTargets="BeforeArchive">
    <Exec Command='"$(InfoZip)" "$(ArchiveOutputPath)\NLog2%(TargetFramework.ProjectFileSuffix)$(ArchiveSuffix)$(ConfigurationSuffix).zip" NLog.* -x *Test*' 
          WorkingDirectory="$(BaseOutputDirectory)\bin\$(Configuration)\%(TargetFramework.Identity)" />
    <Exec Command='"$(InfoZip)" "$(ArchiveOutputPath)\NLog2.doc$(ArchiveSuffix)$(ConfigurationSuffix).zip" NLog.chm'
          WorkingDirectory="$(BaseOutputDirectory)\bin\$(Configuration)\Documentation" />
  </Target>

  <Target Name="SourceArchive" DependsOnTargets="BeforeArchive">
    <Exec Command='"$(Git)" archive --format=zip --worktree-attributes -9 head -o build/bin/Release/Packages/NLog2.source$(ArchiveSuffix).zip' WorkingDirectory=".." />
  </Target>

  <UsingTask TaskName="TokenReplace" TaskFactory="CodeTaskFactory" AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.v4.0.dll">
    <ParameterGroup>
      <Path ParameterType="System.String" Required="true" />
      <Token ParameterType="System.String" Required="true" />
      <Replacement ParameterType="System.String" Required="true" />
    </ParameterGroup>
    <Task>
      <Code Type="Fragment" Language="cs"><![CDATA[
string content = File.ReadAllText(Path);
content = content.Replace(Token, Replacement);
File.WriteAllText(Path, content);

]]></Code>
    </Task>
  </UsingTask>

  <ItemGroup>
    <FilesToCleanup Include="..\**\*.suo" />
    <FilesToCleanup Include="..\**\*.ncb" />
    <FilesToCleanup Include="..\**\*.user" />
    <FilesToCleanup Include="..\**\*.cache" />
    <FilesToCleanup Include="LastTestRunSummary.cmd" />
    <DirectoriesToCleanup Include="_ReSharper.*" />
    <DirectoriesToCleanup Include="..\build\bin" />
    <DirectoriesToCleanup Include="..\build\obj" />
    <DirectoriesToCleanup Include="Docs\Working" />
    <DirectoriesToCleanup Include="TestResults" />
    <ProjectsToCleanup Include="NLog" />
    <ProjectsToCleanup Include="NLogC" />
    <ProjectsToCleanup Include="Doc" />
    <ProjectsToCleanup Include="..\tests\NLog.AsyncBenchmark" />
    <ProjectsToCleanup Include="..\tests\NLog.Benchmark" />
    <ProjectsToCleanup Include="..\tests\NLog.BinaryCompatTests" />
    <ProjectsToCleanup Include="..\tests\NLog.Test" />
    <ProjectsToCleanup Include="..\tests\NLog.UnitTests" />
    <ProjectsToCleanup Include="..\tests\NLog.UnitTests.Web" />
    <ProjectsToCleanup Include="..\tests\NLog.VBTest" />
    <ProjectsToCleanup Include="..\tests\NLogC.Tests" />
    <ProjectsToCleanup Include="..\tools\SilverlightConsoleRunner" />
    <ProjectsToCleanup Include="..\tools\MakeNLogXSD" />
    <ProjectsToCleanup Include="..\tools\DeployNetCF" />
    <ProjectsToCleanup Include="..\tools\DumpTestResultSummary" />
    <ProjectsToCleanup Include="..\tools\DumpApiXml" />
    <SolutionFiles Include="..\**\*.sln" />
  </ItemGroup>

  <Target Name="DeepClean">
     <Delete Files="@(FilesToCleanup)" />
     <RemoveDir Directories="@(DirectoriesToCleanup)" />
     <RemoveDir Directories="@(ProjectsToCleanup -> '%(Identity)\bin')" />
     <RemoveDir Directories="@(ProjectsToCleanup -> '%(Identity)\obj')" />
     <RemoveDir Directories="@(SolutionFiles -> '%(RelativeDir)_ReSharper.%(filename)')" />
  </Target>

  <Import Project="NLog.local" Condition="Exists('NLog.local')" />
</Project>
